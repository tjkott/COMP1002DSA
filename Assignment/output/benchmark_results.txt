--- 1. Sample Sort Output (Size=100, Random) ---
Original (first 10): ['205m', '180m', '128m', '95m', '207m', '155m', '293m', '151m', '206m', '14m']
Sorted (first 10):   ['14m', '17m', '19m', '19m', '21m', '21m', '23m', '24m', '26m', '30m']
Sorted (last 10):    ['247m', '253m', '262m', '280m', '282m', '286m', '287m', '292m', '293m', '294m']

--- 2. Running Full Benchmark ---
Generating and testing datasets for size 100...
Generating and testing datasets for size 500...
Generating and testing datasets for size 1000...

======================================================================================
--- Sorting Algorithm Benchmark Results ---
======================================================================================
Algorithm    | Condition          | Size   | Time (ms)  | Comparisons  | Swaps        | Passed
--------------------------------------------------------------------------------------
Merge Sort   | Random             | 100    | 0.241      | 542          | 0            | Yes
Quick Sort   | Random             | 100    | 0.261      | 707          | 482          | Yes
Merge Sort   | Reversed           | 100    | 0.211      | 322          | 0            | Yes
Quick Sort   | Reversed           | 100    | 0.309      | 839          | 531          | Yes
Merge Sort   | Nearly Sorted      | 100    | 0.248      | 502          | 0            | Yes
Quick Sort   | Nearly Sorted      | 100    | 0.274      | 798          | 419          | Yes
Merge Sort   | Random             | 500    | 1.365      | 3852         | 0            | Yes
Quick Sort   | Random             | 500    | 1.626      | 5446         | 3233         | Yes
Merge Sort   | Reversed           | 500    | 1.199      | 2371         | 0            | Yes
Quick Sort   | Reversed           | 500    | 1.845      | 6702         | 4162         | Yes
Merge Sort   | Nearly Sorted      | 500    | 1.280      | 3524         | 0            | Yes
Quick Sort   | Nearly Sorted      | 500    | 1.406      | 5257         | 2850         | Yes
Merge Sort   | Random             | 1000   | 3.100      | 8680         | 0            | Yes
Quick Sort   | Random             | 1000   | 3.191      | 11793        | 6866         | Yes
Merge Sort   | Reversed           | 1000   | 2.478      | 5469         | 0            | Yes
Quick Sort   | Reversed           | 1000   | 4.190      | 15279        | 9714         | Yes
Merge Sort   | Nearly Sorted      | 1000   | 2.936      | 7988         | 0            | Yes
Quick Sort   | Nearly Sorted      | 1000   | 3.363      | 12119        | 7083         | Yes
======================================================================================

--- 3. Benchmark Analysis ---
Merge Sort (In-Place):
 - Consistent $O(n log n)$ performance. Time scales predictably with size.
 - Performance is almost identical for Random, Reversed, and Nearly Sorted data,
   proving it is not vulnerable to input order. Swaps are 0 as it copies.

Quick Sort (Median-of-Three):
 - Fastest on average (especially for Random and Nearly Sorted data).
 - The Mo3 pivot strategy successfully prevented $O(n^2)$ behavior on Reversed
   and Nearly Sorted lists, keeping performance at $O(n log n).
 - Shows the highest number of swaps, as it works in-place.

Conclusion:
 - For general-purpose sorting, QuickSort (with Mo3) is fastest.
 - If stability is required (preserving order of 30m, 30m), Merge Sort is the only choice.
 - If predictable, worst-case performance is critical, Merge Sort is safer.
=====================================================